@page "/alumnos"
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager Navigation

<PageTitle>Alumnos</PageTitle>

@if (alumnos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Apellidos</th>
                <th>Género</th>
                <th>Fecha de Nacimiento</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var alumno in alumnos)
            {
                <tr>
                    <td>@alumno.Id</td>
                    <td>@alumno.Nombre</td>
                    <td>@alumno.Apellidos</td>
                    <td>@alumno.Genero</td>
                    <td>@alumno.FechaNacimiento</td>
                    <td><button class="btn btn-primary" 
                        @onclick="() => Editar(alumno)">Editar</button></td>
                    <td><button class="btn btn-danger"
                        @onclick="() => Eliminar(alumno)">Eliminar</button></td>
                </tr>
            }
        </tbody>
    </table>
    <br />
    <button class="btn btn-primary" @onclick="Crear">Crear</button>

}

@if (IsModalUpdateVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(tituloModalEditar ?? "")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModalUpdate"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="editarNombre" class="form-label">Nombre</label>
                        <input type="text" id="editarNombre" class="form-control" @bind="alumno!.Nombre" />
                    </div>
                    <div class="mb-3">
                        <label for="editarApellidos" class="form-label">Apellidos</label>
                        <input type="text" id="editarApellidos" class="form-control" @bind="alumno!.Apellidos" />
                    </div>
                    <div class="mb-3">
                        <label for="editarGenero" class="form-label">Género</label>
                        <select id="editarGenero" class="form-select" @bind="alumno!.Genero">
                            <option value="M">Masculino</option>
                            <option value="F">Femenino</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editarFechaNacimiento" class="form-label">Fecha de Nacimiento</label>
                        <input type="date" id="editarFechaNacimiento" class="form-control" @bind="alumno!.FechaNacimiento" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModalUpdate">Cerrar</button>
                    <button type="button" class="btn btn-primary" @onclick="GuardarCambios">Guardar</button>
                </div>
            </div>
        </div>
    </div>
}

@if (IsModalDeleteVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Eliminar alumno</h5>
                    <button type="button" class="btn-close" @onclick="CloseModalDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Está seguro de eliminar el registro?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModalDelete">No</button>
                    <button type="button" class="btn btn-primary" @onclick="Remover">Si</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public class RowData
    {
        public int Id { get; set; }
        public string? Nombre { get; set; }
        public string? Apellidos { get; set; }
        public char? Genero { get; set; } 
        public DateTime? FechaNacimiento { get; set; }
    }
    private Contract.Alumnos? estudiantes;
    private Contract.Alumno[]? alumnos;
    private bool IsModalUpdateVisible { get; set; }
    private bool IsModalDeleteVisible { get; set; }
    private int? idAlumnoEditar { get; set; }
    private int? idAlumnoEliminar { get; set; }
    private RowData? alumno { get; set; }
    private string? _baseAddress;
    private string? tituloModalEditar;

    protected override async Task OnInitializedAsync()
    {
        _baseAddress = Configuration.GetSection("ApiBaseAddress").Value;
        await CargarDatosTabla();  
    }
    private async Task CargarDatosTabla()
    {
        try
        {
            alumnos = null;
            estudiantes = await Http.GetFromJsonAsync<Contract.Alumnos>($"{_baseAddress}/Alumno");
            alumnos = estudiantes!.alumnos;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    private void Crear()
    {
        alumno = new RowData();
        AbrirModalEditar();
    }
    private void Editar(Contract.Alumno row)
    {
        alumno = new RowData
        {
            Id = row.Id,
            Nombre = row.Nombre,
            Apellidos = row.Apellidos,
            Genero = row.Genero,
            FechaNacimiento = row.FechaNacimiento
        };
        AbrirModalEditar();
    }
    private void AbrirModalEditar()
    {
        ConfigurarTituloEditar();
        IsModalUpdateVisible = true;
    }
    private void ConfigurarTituloEditar()
    {
        if (EsNuevoRegistro()) tituloModalEditar = "Crear Alumno";
        else tituloModalEditar = "Editar Alumno";
    }
    private bool EsNuevoRegistro()
    {
        return alumno?.Id == null || alumno.Id == 0;
    }
    private void CloseModalUpdate()
    {
        IsModalUpdateVisible = false;
        alumno = null;
    }
    private void GuardarCambios()
    {
        if (EsNuevoRegistro()) Anadir();
        else Actualizar();
    }
    private async void Anadir()
    {
        try
        {
            var actualizacionExitosa = await CrearBackend();
            if (actualizacionExitosa) ActualizarPagina();
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    private async Task<bool> CrearBackend()
    {
        Contract.Alumno alumnoCrear = new Contract.Alumno(
            (int)alumno!.Id,
            alumno.Nombre,
            alumno.Apellidos,
            alumno.Genero,
            (DateTime)alumno.FechaNacimiento!);
        var resultado = await Http.PostAsJsonAsync<Contract.Alumno>(
            $"{_baseAddress}/Alumno",
            alumnoCrear);
        return resultado.IsSuccessStatusCode;
    }
    private void ActualizarPagina()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }
    private async void Actualizar()
    {
        try
        {
            var actualizacionExitosa = await ActualizarBackend();
            if (actualizacionExitosa) ActualizarPagina();
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    private async Task<bool> ActualizarBackend()
    {
        Contract.Alumno alumnoActualizar = new Contract.Alumno(
            (int)alumno!.Id, 
            alumno.Nombre, 
            alumno.Apellidos, 
            alumno.Genero, 
            (DateTime)alumno.FechaNacimiento!);
        var resultado = await Http.PutAsJsonAsync<Contract.Alumno>(
            $"{_baseAddress}/Alumno",
            alumnoActualizar);
        return resultado.IsSuccessStatusCode;
    }
    private void Eliminar(Contract.Alumno row)
    {
        idAlumnoEliminar = row.Id;
        IsModalDeleteVisible = true;
    }
    private void CloseModalDelete()
    {
        IsModalDeleteVisible = false;
        idAlumnoEliminar = null;
    }
    private async void Remover()
    {
        try
        {
            var resultado = await Http.DeleteFromJsonAsync<int>(
                $"{_baseAddress}/Alumno?id={idAlumnoEliminar}");
            if (resultado > 0) ActualizarPagina();
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
}
